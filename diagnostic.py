#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagnostic REMOTE
Aide √† identifier et r√©soudre les probl√®mes de d√©marrage
"""
import os
import sys
import subprocess
import time
import json
from pathlib import Path

def print_status(message, status="info"):
    """Affiche un message avec un statut color√©"""
    colors = {
        "info": "\033[94m",     # Bleu
        "success": "\033[92m",  # Vert
        "warning": "\033[93m",  # Jaune
        "error": "\033[91m",    # Rouge
        "reset": "\033[0m"      # Reset
    }
    
    icons = {
        "info": "‚ÑπÔ∏è",
        "success": "‚úÖ",
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå"
    }
    
    print(f"{colors[status]}{icons[status]} {message}{colors['reset']}")

def check_node_npm():
    """V√©rifie que Node.js et npm sont install√©s"""
    try:
        # V√©rifier Node.js
        node_result = subprocess.run(['node', '--version'], 
                                   capture_output=True, text=True, check=True)
        node_version = node_result.stdout.strip()
        print_status(f"Node.js: {node_version}", "success")
        
        # V√©rifier npm
        npm_result = subprocess.run(['npm', '--version'], 
                                  capture_output=True, text=True, check=True)
        npm_version = npm_result.stdout.strip()
        print_status(f"npm: {npm_version}", "success")
        
        return True
    except subprocess.CalledProcessError:
        print_status("Node.js ou npm non trouv√©", "error")
        return False
    except FileNotFoundError:
        print_status("Node.js non install√©", "error")
        return False

def check_backend():
    """V√©rifie si le backend est d√©marr√©"""
    try:
        import requests
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code == 200:
            print_status("Backend accessible sur http://localhost:8000", "success")
            return True
        else:
            print_status(f"Backend r√©pond avec le code {response.status_code}", "warning")
            return False
    except Exception as e:
        print_status("Backend non accessible sur http://localhost:8000", "warning")
        print_status("D√©marrez le backend avec: cd backend && python run.py", "info")
        return False

def install_dependencies():
    """Installe les d√©pendances npm"""
    print_status("Installation des d√©pendances npm...", "info")
    try:
        result = subprocess.run(['npm', 'install'], cwd='frontend', check=True)
        print_status("D√©pendances install√©es avec succ√®s", "success")
        return True
    except subprocess.CalledProcessError as e:
        print_status(f"Erreur installation d√©pendances: {e}", "error")
        return False

def check_frontend_files():
    """V√©rifie que les fichiers frontend essentiels existent"""
    frontend_path = Path("frontend")
    required_files = [
        "package.json",
        "vite.config.js",
        "src/index-debug.jsx",
        "src/App-debug.jsx",
        "src/stores/gameStore.js",
        "src/stores/osStore.js",
        "src/stores/tomStore.js",
        "src/services/websocketService.js",
        "src/services/audioService.js"
    ]
    
    missing_files = []
    for file in required_files:
        if not (frontend_path / file).exists():
            missing_files.append(file)
    
    if missing_files:
        print_status("Fichiers manquants:", "error")
        for file in missing_files:
            print(f"  - {file}")
        return False
    else:
        print_status("Tous les fichiers essentiels sont pr√©sents", "success")
        return True

def start_dev_server():
    """D√©marre le serveur de d√©veloppement"""
    print_status("D√©marrage du serveur de d√©veloppement...", "info")
    print_status("Ouvrez http://localhost:5173 dans votre navigateur", "info")
    print_status("Ouvrez la console (F12) pour voir les logs de diagnostic", "info")
    print()
    
    try:
        # D√©marrer le serveur de d√©veloppement
        process = subprocess.Popen(['npm', 'run', 'dev'], cwd='frontend')
        
        print_status("Serveur d√©marr√©. Appuyez sur Ctrl+C pour arr√™ter.", "success")
        process.wait()
        
    except KeyboardInterrupt:
        print_status("Arr√™t du serveur de d√©veloppement", "info")
        process.terminate()
    except Exception as e:
        print_status(f"Erreur d√©marrage serveur: {e}", "error")

def main():
    """Fonction principale de diagnostic"""
    print("üîç REMOTE - Diagnostic de d√©marrage")
    print("=" * 50)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("frontend").exists() or not Path("backend").exists():
        print_status("Erreur: Vous devez √™tre dans le r√©pertoire remote-game", "error")
        sys.exit(1)
    
    # 1. V√©rifier Node.js et npm
    print_status("V√©rification des pr√©requis...", "info")
    if not check_node_npm():
        print_status("Installez Node.js depuis https://nodejs.org/", "error")
        sys.exit(1)
    
    # 2. V√©rifier les fichiers frontend
    if not check_frontend_files():
        print_status("Certains fichiers sont manquants", "error")
        sys.exit(1)
    
    # 3. V√©rifier le backend (optionnel)
    check_backend()
    
    # 4. Installer les d√©pendances
    if not Path("frontend/node_modules").exists():
        if not install_dependencies():
            sys.exit(1)
    else:
        print_status("D√©pendances d√©j√† install√©es", "success")
    
    print()
    print_status("Diagnostic termin√© - Pr√™t √† d√©marrer", "success")
    print()
    
    # 5. Proposer de d√©marrer le serveur
    choice = input("D√©marrer le serveur de d√©veloppement ? (o/n): ")
    if choice.lower() in ['o', 'oui', 'y', 'yes']:
        start_dev_server()
    else:
        print()
        print_status("Pour d√©marrer manuellement:", "info")
        print("  cd frontend")
        print("  npm run dev")
        print()
        print_status("Puis ouvrez http://localhost:5173", "info")

if __name__ == "__main__":
    main()
