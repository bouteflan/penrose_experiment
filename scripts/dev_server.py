"""
Script de serveur de d√©veloppement pour REMOTE
Lance automatiquement le backend et le frontend en parall√®le
"""
import os
import sys
import subprocess
import signal
import time
import threading
from pathlib import Path
import psutil


class DevServer:
    """Serveur de d√©veloppement pour REMOTE"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backend_dir = self.project_root / "backend"
        self.frontend_dir = self.project_root / "frontend"
        self.backend_process = None
        self.frontend_process = None
        self.running = True
    
    def print_header(self):
        """Affiche l'en-t√™te"""
        print("=" * 60)
        print("üéÆ REMOTE - Serveur de D√©veloppement")
        print("   Backend FastAPI + Frontend React")
        print("=" * 60)
        print()
    
    def check_ports(self):
        """V√©rifie que les ports sont disponibles"""
        print("üîç V√©rification des ports...")
        
        ports_to_check = [8000, 5173]  # Backend et Frontend
        busy_ports = []
        
        for port in ports_to_check:
            for conn in psutil.net_connections():
                if conn.laddr.port == port and conn.status == 'LISTEN':
                    busy_ports.append(port)
                    break
        
        if busy_ports:
            print(f"‚ö†Ô∏è  Ports occup√©s: {busy_ports}")
            print("   Arr√™tez les processus utilisant ces ports ou changez la configuration")
            return False
        
        print("‚úÖ Ports 8000 et 5173 disponibles")
        return True
    
    def start_backend(self):
        """Lance le serveur backend FastAPI"""
        print("üêç D√©marrage du backend FastAPI...")
        
        os.chdir(self.backend_dir)
        
        # Utiliser Python dans le venv
        venv_path = self.backend_dir / "venv"
        if os.name == 'nt':  # Windows
            python_exe = venv_path / "Scripts" / "python.exe"
        else:  # Unix/Linux/Mac  
            python_exe = venv_path / "bin" / "python"
        
        if not python_exe.exists():
            print("‚ùå Environnement virtuel Python non trouv√©")
            print("   Lancez d'abord: python scripts/setup.py")
            return False
        
        try:
            self.backend_process = subprocess.Popen(
                [str(python_exe), "run.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
                shell=True  # <--- AJOUTEZ CETTE LIGNE
            )
            
            # Thread pour afficher les logs backend
            threading.Thread(
                target=self._log_output,
                args=(self.backend_process, "üêç BACKEND"),
                daemon=True
            ).start()
            
            print("‚úÖ Backend FastAPI d√©marr√© (port 8000)")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage backend: {e}")
            return False
    
    def start_frontend(self):
        """Lance le serveur frontend React"""
        print("‚öõÔ∏è  D√©marrage du frontend React...")
        
        os.chdir(self.frontend_dir)
        
        # V√©rifier que node_modules existe
        if not (self.frontend_dir / "node_modules").exists():
            print("‚ùå node_modules non trouv√©")
            print("   Lancez d'abord: npm install")
            return False
        
        try:
            self.frontend_process = subprocess.Popen(
                ["npm", "run", "dev"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            # Thread pour afficher les logs frontend
            threading.Thread(
                target=self._log_output,
                args=(self.frontend_process, "‚öõÔ∏è  FRONTEND"),
                daemon=True
            ).start()
            
            print("‚úÖ Frontend React d√©marr√© (port 5173)")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage frontend: {e}")
            return False
    
    def _log_output(self, process, prefix):
        """Affiche les logs d'un processus avec un pr√©fixe"""
        for line in iter(process.stdout.readline, ''):
            if line:
                # Filtrer les logs trop verbeux
                if any(skip in line.lower() for skip in ['static', 'favicon', 'hot update']):
                    continue
                print(f"{prefix}: {line.strip()}")
    
    def wait_for_startup(self):
        """Attend que les serveurs soient pr√™ts"""
        print("\n‚è≥ D√©marrage des serveurs...")
        
        max_wait = 30  # 30 secondes max
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            backend_ready = self._check_backend_health()
            frontend_ready = self._check_frontend_health()
            
            if backend_ready and frontend_ready:
                print("\nüéâ Serveurs pr√™ts !")
                return True
            
            time.sleep(2)
        
        print("\n‚ö†Ô∏è  Timeout - Les serveurs mettent du temps √† d√©marrer")
        return False
    
    def _check_backend_health(self):
        """V√©rifie si le backend r√©pond"""
        try:
            import requests
            response = requests.get("http://localhost:8000/health", timeout=2)
            return response.status_code == 200
        except:
            return False
    
    def _check_frontend_health(self):
        """V√©rifie si le frontend r√©pond"""
        try:
            import requests
            response = requests.get("http://localhost:5173", timeout=2)
            return response.status_code == 200
        except:
            return False
    
    def show_urls(self):
        """Affiche les URLs d'acc√®s"""
        print("\n" + "=" * 60)
        print("üåç SERVEURS ACTIFS")
        print("=" * 60)
        print()
        print("üéÆ Application principale:")
        print("   http://localhost:5173")
        print()
        print("üîß API Backend:")
        print("   http://localhost:8000")
        print("   http://localhost:8000/docs (Documentation Swagger)")
        print("   http://localhost:8000/health (Health Check)")
        print()
        print("üí° Conseils:")
        print("   - Ouvrez http://localhost:5173 pour jouer")
        print("   - Utilisez Ctrl+C pour arr√™ter les serveurs")
        print("   - Les modifications sont recharg√©es automatiquement")
        print()
        print("=" * 60)
    
    def cleanup(self):
        """Nettoie les processus en cours"""
        print("\nüõë Arr√™t des serveurs...")
        
        if self.backend_process:
            try:
                self.backend_process.terminate()
                self.backend_process.wait(timeout=5)
                print("‚úÖ Backend arr√™t√©")
            except subprocess.TimeoutExpired:
                self.backend_process.kill()
                print("‚ö†Ô∏è  Backend forc√© √† s'arr√™ter")
            except Exception as e:
                print(f"‚ùå Erreur arr√™t backend: {e}")
        
        if self.frontend_process:
            try:
                self.frontend_process.terminate()
                self.frontend_process.wait(timeout=5)
                print("‚úÖ Frontend arr√™t√©")
            except subprocess.TimeoutExpired:
                self.frontend_process.kill()
                print("‚ö†Ô∏è  Frontend forc√© √† s'arr√™ter")
            except Exception as e:
                print(f"‚ùå Erreur arr√™t frontend: {e}")
        
        print("üëã Serveurs arr√™t√©s")
    
    def run(self):
        """Lance le serveur de d√©veloppement"""
        self.print_header()
        
        # Configuration du signal handler pour Ctrl+C
        def signal_handler(sig, frame):
            self.running = False
            self.cleanup()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        
        try:
            # V√©rifications pr√©alables
            if not self.check_ports():
                return False
            
            # D√©marrage des serveurs
            if not self.start_backend():
                return False
            
            time.sleep(3)  # Laisser le backend d√©marrer
            
            if not self.start_frontend():
                self.cleanup()
                return False
            
            # Attendre que tout soit pr√™t
            self.wait_for_startup()
            
            # Afficher les informations d'acc√®s
            self.show_urls()
            
            # Boucle principale
            try:
                while self.running:
                    # V√©rifier que les processus sont toujours vivants
                    if self.backend_process and self.backend_process.poll() is not None:
                        print("‚ùå Le backend s'est arr√™t√© de mani√®re inattendue")
                        break
                    
                    if self.frontend_process and self.frontend_process.poll() is not None:
                        print("‚ùå Le frontend s'est arr√™t√© de mani√®re inattendue")
                        break
                    
                    time.sleep(1)
            
            except KeyboardInterrupt:
                pass
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            return False
        
        finally:
            self.cleanup()
        
        return True


def main():
    """Point d'entr√©e principal"""
    
    # V√©rifier que le script setup a √©t√© lanc√©
    project_root = Path(__file__).parent.parent
    env_file = project_root / "backend" / ".env"
    
    if not env_file.exists():
        print("‚ùå Fichier .env non trouv√©")
        print("   Lancez d'abord: python scripts/setup.py")
        sys.exit(1)
    
    # Lancer le serveur
    server = DevServer()
    success = server.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
