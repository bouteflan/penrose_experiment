"""
Script de d√©ploiement pour REMOTE
Pr√©pare l'application pour la production
"""
import os
import sys
import subprocess
import shutil
import json
from pathlib import Path
from datetime import datetime


class RemoteDeployer:
    """D√©ployeur pour REMOTE"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backend_dir = self.project_root / "backend"
        self.frontend_dir = self.project_root / "frontend"
        self.deploy_dir = self.project_root / "deploy"
        self.version = self._get_version()
    
    def _get_version(self):
        """R√©cup√®re la version du projet"""
        try:
            with open(self.frontend_dir / "package.json") as f:
                package_json = json.load(f)
                return package_json.get("version", "1.0.0")
        except:
            return "1.0.0"
    
    def print_header(self):
        """Affiche l'en-t√™te"""
        print("=" * 60)
        print("üöÄ REMOTE - D√©ploiement Production")
        print(f"   Version: {self.version}")
        print("=" * 60)
        print()
    
    def clean_deploy_directory(self):
        """Nettoie le r√©pertoire de d√©ploiement"""
        print("üßπ Nettoyage du r√©pertoire de d√©ploiement...")
        
        if self.deploy_dir.exists():
            shutil.rmtree(self.deploy_dir)
        
        self.deploy_dir.mkdir(parents=True)
        print("‚úÖ R√©pertoire de d√©ploiement nettoy√©")
    
    def build_frontend(self):
        """Build le frontend pour la production"""
        print("‚öõÔ∏è Build du frontend React...")
        
        os.chdir(self.frontend_dir)
        
        # Installer les d√©pendances si n√©cessaire
        if not (self.frontend_dir / "node_modules").exists():
            print("   Installation des d√©pendances...")
            result = subprocess.run(["npm", "install"])
            if result.returncode != 0:
                print("‚ùå Erreur installation d√©pendances frontend")
                return False
        
        # Build de production
        print("   Build de production...")
        result = subprocess.run(["npm", "run", "build"])
        if result.returncode != 0:
            print("‚ùå Erreur build frontend")
            return False
        
        # V√©rifier que le build existe
        dist_dir = self.frontend_dir / "dist"
        if not dist_dir.exists():
            print("‚ùå Dossier dist non cr√©√©")
            return False
        
        print("‚úÖ Frontend build√© avec succ√®s")
        return True
    
    def prepare_backend(self):
        """Pr√©pare le backend pour la production"""
        print("üêç Pr√©paration du backend...")
        
        backend_deploy = self.deploy_dir / "backend"
        backend_deploy.mkdir(parents=True)
        
        # Copier les fichiers source
        print("   Copie des fichiers source...")
        
        # Copier le code
        shutil.copytree(
            self.backend_dir / "app",
            backend_deploy / "app"
        )
        
        # Copier les fichiers de configuration
        files_to_copy = [
            "requirements.txt",
            "run.py",
            ".env.example"
        ]
        
        for file_name in files_to_copy:
            src = self.backend_dir / file_name
            if src.exists():
                shutil.copy(src, backend_deploy / file_name)
        
        # Copier les donn√©es
        shutil.copytree(
            self.project_root / "data",
            backend_deploy / "data"
        )
        
        print("‚úÖ Backend pr√©par√©")
        return True
    
    def prepare_frontend(self):
        """Pr√©pare le frontend pour la production"""
        print("üì¶ Pr√©paration du frontend...")
        
        frontend_deploy = self.deploy_dir / "frontend"
        frontend_deploy.mkdir(parents=True)
        
        # Copier le build
        dist_src = self.frontend_dir / "dist"
        if not dist_src.exists():
            print("‚ùå Build frontend non trouv√©")
            return False
        
        shutil.copytree(dist_src, frontend_deploy / "dist")
        
        # Copier package.json pour info
        shutil.copy(
            self.frontend_dir / "package.json",
            frontend_deploy / "package.json"
        )
        
        print("‚úÖ Frontend pr√©par√©")
        return True
    
    def create_deployment_scripts(self):
        """Cr√©e les scripts de d√©ploiement"""
        print("üìù Cr√©ation des scripts de d√©ploiement...")
        
        # Script de d√©marrage backend
        start_script = '''#!/bin/bash
# Script de d√©marrage pour REMOTE Backend

echo "üéÆ D√©marrage REMOTE Backend..."

# Cr√©er l'environnement virtuel
python3 -m venv venv
source venv/bin/activate

# Installer les d√©pendances
pip install -r requirements.txt

# Cr√©er les dossiers n√©cessaires
mkdir -p database logs

# Initialiser la base de donn√©es
python -c "
import sys
sys.path.insert(0, '.')
from app.database import create_tables
create_tables()
print('Base de donn√©es initialis√©e')
"

# D√©marrer le serveur
echo "D√©marrage du serveur sur le port 8000..."
python run.py
'''
        
        with open(self.deploy_dir / "start_backend.sh", "w") as f:
            f.write(start_script)
        
        # Script Windows
        start_script_win = '''@echo off
REM Script de d√©marrage pour REMOTE Backend (Windows)

echo üéÆ D√©marrage REMOTE Backend...

REM Cr√©er l'environnement virtuel
python -m venv venv
call venv\\Scripts\\activate.bat

REM Installer les d√©pendances
pip install -r requirements.txt

REM Cr√©er les dossiers n√©cessaires
if not exist "database" mkdir database
if not exist "logs" mkdir logs

REM Initialiser la base de donn√©es
python -c "import sys; sys.path.insert(0, '.'); from app.database import create_tables; create_tables(); print('Base de donn√©es initialis√©e')"

REM D√©marrer le serveur
echo D√©marrage du serveur sur le port 8000...
python run.py

pause
'''
        
        with open(self.deploy_dir / "start_backend.bat", "w") as f:
            f.write(start_script_win)
        
        # Rendre les scripts ex√©cutables
        try:
            os.chmod(self.deploy_dir / "start_backend.sh", 0o755)
        except:
            pass  # Peut √©chouer sur Windows
        
        print("‚úÖ Scripts de d√©ploiement cr√©√©s")
        return True
    
    def create_production_config(self):
        """Cr√©e la configuration de production"""
        print("‚öôÔ∏è Cr√©ation de la configuration de production...")
        
        prod_env = '''# Configuration de production pour REMOTE
# IMPORTANT: Configurez ces valeurs avant le d√©ploiement

# Configuration de base
APP_NAME="REMOTE Psychological Thriller Game"
ENVIRONMENT=production
DEBUG=false

# Configuration serveur
HOST=0.0.0.0
PORT=8000
RELOAD=false

# Configuration base de donn√©es
DATABASE_URL=sqlite:///./database/game_production.db

# Configuration OpenAI (OBLIGATOIRE)
OPENAI_API_KEY=your_production_openai_api_key_here
OPENAI_MODEL=gpt-4o
OPENAI_MAX_TOKENS=1000
OPENAI_TEMPERATURE=0.7

# Configuration s√©curit√© (CHANGEZ CES VALEURS)
SECRET_KEY=your-very-secret-production-key-minimum-32-characters-long
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Configuration exp√©rimentale
COLLECT_EXPERIMENT_DATA=true
ANONYMIZE_DATA=true

# Configuration Tom AI
TOM_PERSONALITY_CONDITION=confident
TOM_RESPONSE_DELAY_MIN=0.5
TOM_RESPONSE_DELAY_MAX=2.0
TOM_TYPING_SPEED=0.05

# Configuration du jeu
GAME_DURATION_MINUTES=10
CORRUPTION_INTENSITY_MAX=1.0
BIAS_MEASUREMENT_INTERVAL=5

# Configuration CORS (ajustez selon votre domaine)
ALLOWED_ORIGINS=["https://your-domain.com", "https://www.your-domain.com"]

# Configuration WebSocket
WEBSOCKET_PING_INTERVAL=20
WEBSOCKET_PING_TIMEOUT=10
'''
        
        with open(self.deploy_dir / "backend" / ".env.production", "w") as f:
            f.write(prod_env)
        
        print("‚úÖ Configuration de production cr√©√©e")
        return True
    
    def create_documentation(self):
        """Cr√©e la documentation de d√©ploiement"""
        print("üìö Cr√©ation de la documentation...")
        
        docs_dir = self.deploy_dir / "docs"
        docs_dir.mkdir(exist_ok=True)
        
        deployment_guide = f'''# Guide de D√©ploiement REMOTE v{self.version}

## Pr√©requis

- Python 3.9+
- Node.js 18+ (pour build frontend)
- Cl√© API OpenAI
- Serveur avec acc√®s Internet

## Installation

### 1. D√©compression

```bash
tar -xzf remote-v{self.version}.tar.gz
cd remote-v{self.version}
```

### 2. Configuration Backend

```bash
cd backend
cp .env.production .env
```

**IMPORTANT:** √âditez le fichier `.env` et configurez :
- `OPENAI_API_KEY` : Votre cl√© API OpenAI
- `SECRET_KEY` : Une cl√© secr√®te unique pour votre d√©ploiement
- `ALLOWED_ORIGINS` : Les domaines autoris√©s pour CORS

### 3. D√©marrage

#### Linux/Mac :
```bash
chmod +x start_backend.sh
./start_backend.sh
```

#### Windows :
```cmd
start_backend.bat
```

### 4. Serveur Frontend (Optionnel)

Si vous voulez servir le frontend s√©par√©ment :

```bash
cd frontend
# Servir avec un serveur web statique
python -m http.server 3000 -d dist
# ou
npx serve dist -p 3000
```

## Configuration Nginx (Recommand√©)

```nginx
server {{
    listen 80;
    server_name your-domain.com;
    
    # Frontend statique
    location / {{
        root /path/to/remote/frontend/dist;
        try_files $uri $uri/ /index.html;
    }}
    
    # API Backend
    location /api {{
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }}
    
    # WebSocket
    location /ws {{
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }}
}}
```

## Surveillance

### Logs
- Backend : `backend/logs/remote_YYYYMMDD.log`
- V√©rifiez r√©guli√®rement les erreurs

### Base de donn√©es
- Fichier : `backend/database/game_production.db`
- Sauvegardez r√©guli√®rement

### Monitoring
- Health check : `http://your-domain.com/health`
- API docs : `http://your-domain.com/docs`

## S√©curit√©

1. Changez `SECRET_KEY` en production
2. Utilisez HTTPS en production  
3. Limitez l'acc√®s √† la base de donn√©es
4. Surveillez les logs d'erreur
5. Mettez √† jour r√©guli√®rement les d√©pendances

## Support

Pour obtenir de l'aide :
1. V√©rifiez les logs d'erreur
2. Consultez la documentation API : `/docs`
3. V√©rifiez la configuration `.env`

Version: {self.version}
Date de build: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
'''
        
        with open(docs_dir / "DEPLOYMENT.md", "w") as f:
            f.write(deployment_guide)
        
        print("‚úÖ Documentation cr√©√©e")
        return True
    
    def create_package(self):
        """Cr√©e le package de d√©ploiement"""
        print("üì¶ Cr√©ation du package de d√©ploiement...")
        
        package_name = f"remote-v{self.version}"
        
        # Cr√©er l'archive
        os.chdir(self.project_root)
        
        shutil.make_archive(
            package_name,
            'zip',
            self.deploy_dir
        )
        
        package_path = self.project_root / f"{package_name}.zip"
        package_size = package_path.stat().st_size / (1024 * 1024)  # MB
        
        print(f"‚úÖ Package cr√©√©: {package_name}.zip ({package_size:.1f} MB)")
        return True
    
    def run(self):
        """Lance le processus de d√©ploiement"""
        self.print_header()
        
        steps = [
            ("Nettoyage du r√©pertoire de d√©ploiement", self.clean_deploy_directory),
            ("Build du frontend", self.build_frontend),
            ("Pr√©paration du backend", self.prepare_backend), 
            ("Pr√©paration du frontend", self.prepare_frontend),
            ("Cr√©ation des scripts de d√©ploiement", self.create_deployment_scripts),
            ("Cr√©ation de la configuration de production", self.create_production_config),
            ("Cr√©ation de la documentation", self.create_documentation),
            ("Cr√©ation du package", self.create_package)
        ]
        
        success_count = 0
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            try:
                if step_func():
                    success_count += 1
                else:
                    print(f"‚ùå √âchec: {step_name}")
                    break
            except Exception as e:
                print(f"‚ùå Erreur lors de {step_name}: {e}")
                break
        
        # R√©sultats
        print("\n" + "=" * 60)
        if success_count == len(steps):
            print("üéâ D√©ploiement pr√©par√© avec succ√®s !")
            print(f"üì¶ Package: remote-v{self.version}.zip")
            print(f"üìÅ Dossier: {self.deploy_dir}")
            print("\nüìö Consultez deploy/docs/DEPLOYMENT.md pour les instructions")
        else:
            print(f"‚ö†Ô∏è D√©ploiement partiel: {success_count}/{len(steps)} √©tapes r√©ussies")
        
        print("=" * 60)
        return success_count == len(steps)


def main():
    """Point d'entr√©e principal"""
    deployer = RemoteDeployer()
    success = deployer.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
