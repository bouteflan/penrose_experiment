"""
Script d'installation et de configuration pour REMOTE
Automatise l'installation des d√©pendances et la configuration initiale
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path
import json


class RemoteInstaller:
    """Installateur pour le projet REMOTE"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backend_dir = self.project_root / "backend"
        self.frontend_dir = self.project_root / "frontend"
        self.success_count = 0
        self.total_steps = 10
    
    def print_header(self):
        """Affiche l'en-t√™te du script"""
        print("=" * 60)
        print("üéÆ REMOTE - Script d'Installation")
        print("   Thriller Psychologique avec IA")
        print("=" * 60)
        print()
    
    def check_prerequisites(self):
        """V√©rifie les pr√©requis syst√®me"""
        print("üîç V√©rification des pr√©requis...")
        
        # V√©rifier Python
        try:
            python_version = sys.version_info
            if python_version.major < 3 or python_version.minor < 9:
                print("‚ùå Python 3.9+ requis")
                return False
            print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        except Exception as e:
            print(f"‚ùå Erreur Python: {e}")
            return False
        
        # V√©rifier Node.js
        try:
            result = subprocess.run(["node", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                node_version = result.stdout.strip()
                print(f"‚úÖ Node.js {node_version}")
            else:
                print("‚ùå Node.js non trouv√© - Installez Node.js 18+")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js non trouv√© - Installez Node.js 18+")
            return False
        
        # V√©rifier npm
        try:
            result = subprocess.run(["npm", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                npm_version = result.stdout.strip()
                print(f"‚úÖ npm {npm_version}")
            else:
                print("‚ùå npm non trouv√©")
                return False
        except FileNotFoundError:
            print("‚ùå npm non trouv√©")
            return False
        
        self.success_count += 1
        return True
    
    def create_directories(self):
        """Cr√©e les dossiers n√©cessaires"""
        print("\nüìÅ Cr√©ation des dossiers...")
        
        directories = [
            self.project_root / "database",
            self.project_root / "logs",
            self.backend_dir / "app" / "static",
            self.frontend_dir / "dist"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"   üìÅ {directory.relative_to(self.project_root)}")
        
        self.success_count += 1
        print("‚úÖ Dossiers cr√©√©s")
    
    def setup_backend_environment(self):
        """Configure l'environnement backend Python"""
        print("\nüêç Configuration de l'environnement Python...")
        
        os.chdir(self.backend_dir)
        
        # Cr√©er l'environnement virtuel
        venv_path = self.backend_dir / "venv"
        if not venv_path.exists():
            print("   Cr√©ation de l'environnement virtuel...")
            result = subprocess.run([sys.executable, "-m", "venv", "venv"])
            if result.returncode != 0:
                print("‚ùå Erreur cr√©ation environnement virtuel")
                return False
        
        # D√©terminer le chemin de l'ex√©cutable Python dans le venv
        if os.name == 'nt':  # Windows
            python_exe = venv_path / "Scripts" / "python.exe"
            pip_exe = venv_path / "Scripts" / "pip.exe"
        else:  # Unix/Linux/Mac
            python_exe = venv_path / "bin" / "python"
            pip_exe = venv_path / "bin" / "pip"
        
        # Installer les d√©pendances
        print("   Installation des d√©pendances Python...")
        result = subprocess.run([
            str(pip_exe), "install", "-r", "requirements.txt"
        ])
        if result.returncode != 0:
            print("‚ùå Erreur installation d√©pendances Python")
            return False
        
        self.success_count += 1
        print("‚úÖ Environnement Python configur√©")
        return True
    
    def setup_frontend_environment(self):
        """Configure l'environnement frontend Node.js"""
        print("\nüì¶ Configuration de l'environnement Node.js...")
        
        os.chdir(self.frontend_dir)
        
        # Installer les d√©pendances
        print("   Installation des d√©pendances Node.js...")
        result = subprocess.run(["npm", "install"])
        if result.returncode != 0:
            print("‚ùå Erreur installation d√©pendances Node.js")
            return False
        
        self.success_count += 1
        print("‚úÖ Environnement Node.js configur√©")
        return True
    
    def create_env_file(self):
        """Cr√©e le fichier .env √† partir du template"""
        print("\n‚öôÔ∏è Configuration du fichier .env...")
        
        env_example = self.backend_dir / ".env.example"
        env_file = self.backend_dir / ".env"
        
        if env_example.exists() and not env_file.exists():
            shutil.copy(env_example, env_file)
            print("   üìù Fichier .env cr√©√© depuis .env.example")
            print("   ‚ö†Ô∏è  IMPORTANT: Configurez votre cl√© API OpenAI dans .env")
            print("   ‚ö†Ô∏è  Changez SECRET_KEY en production")
        elif env_file.exists():
            print("   ‚úÖ Fichier .env existe d√©j√†")
        else:
            print("   ‚ùå Template .env.example non trouv√©")
            return False
        
        self.success_count += 1
        return True
    
    def initialize_database(self):
        """Initialise la base de donn√©es"""
        print("\nüóÑÔ∏è Initialisation de la base de donn√©es...")
        
        os.chdir(self.backend_dir)
        
        # Utiliser Python dans le venv pour initialiser la DB
        venv_path = self.backend_dir / "venv"
        if os.name == 'nt':  # Windows
            python_exe = venv_path / "Scripts" / "python.exe"
        else:  # Unix/Linux/Mac
            python_exe = venv_path / "bin" / "python"
        
        # Script d'initialisation simple
        init_script = '''
import sys
sys.path.insert(0, ".")
from app.database import create_tables
try:
    create_tables()
    print("‚úÖ Base de donn√©es initialis√©e")
except Exception as e:
    print(f"‚ùå Erreur initialisation DB: {e}")
    sys.exit(1)
'''
        
        result = subprocess.run([
            str(python_exe), "-c", init_script
        ])
        
        if result.returncode == 0:
            self.success_count += 1
            return True
        else:
            print("‚ùå Erreur initialisation base de donn√©es")
            return False
    
    def verify_installation(self):
        """V√©rifie que l'installation est correcte"""
        print("\n‚úÖ V√©rification de l'installation...")
        
        # V√©rifier les fichiers critiques
        critical_files = [
            self.backend_dir / "app" / "main.py",
            self.backend_dir / ".env",
            self.frontend_dir / "package.json",
            self.project_root / "database",
        ]
        
        all_good = True
        for file_path in critical_files:
            if file_path.exists():
                print(f"   ‚úÖ {file_path.relative_to(self.project_root)}")
            else:
                print(f"   ‚ùå {file_path.relative_to(self.project_root)} manquant")
                all_good = False
        
        if all_good:
            self.success_count += 1
            return True
        return False
    
    def show_next_steps(self):
        """Affiche les prochaines √©tapes"""
        print("\nüéØ Prochaines √©tapes:")
        print()
        print("1. Configurez votre cl√© API OpenAI dans backend/.env :")
        print("   OPENAI_API_KEY=votre_cl√©_ici")
        print()
        print("2. Lancez le backend :")
        print("   cd backend")
        print("   venv\\Scripts\\activate  # Windows")
        print("   source venv/bin/activate  # Linux/Mac")
        print("   python run.py")
        print()
        print("3. Dans un autre terminal, lancez le frontend :")
        print("   cd frontend")
        print("   npm run dev")
        print()
        print("4. Ouvrez http://localhost:5173 dans votre navigateur")
        print()
        print("üìö Documentation compl√®te dans docs/")
        print()
    
    def run(self):
        """Lance l'installation compl√®te"""
        self.print_header()
        
        steps = [
            ("V√©rification des pr√©requis", self.check_prerequisites),
            ("Cr√©ation des dossiers", self.create_directories),
            ("Configuration environnement Python", self.setup_backend_environment),
            ("Configuration environnement Node.js", self.setup_frontend_environment),
            ("Configuration fichier .env", self.create_env_file),
            ("Initialisation base de donn√©es", self.initialize_database),
            ("V√©rification installation", self.verify_installation)
        ]
        
        for step_name, step_func in steps:
            try:
                if not step_func():
                    print(f"\n‚ùå √âchec: {step_name}")
                    print("Installation interrompue.")
                    return False
            except Exception as e:
                print(f"\n‚ùå Erreur lors de {step_name}: {e}")
                return False
        
        # R√©sultats
        print("\n" + "=" * 60)
        if self.success_count == len(steps):
            print("üéâ Installation termin√©e avec succ√®s !")
            print(f"‚úÖ {self.success_count}/{len(steps)} √©tapes r√©ussies")
            self.show_next_steps()
        else:
            print(f"‚ö†Ô∏è Installation partielle: {self.success_count}/{len(steps)} √©tapes r√©ussies")
            print("V√©rifiez les erreurs ci-dessus et relancez le script.")
        
        print("=" * 60)
        return self.success_count == len(steps)


def main():
    """Point d'entr√©e principal"""
    installer = RemoteInstaller()
    success = installer.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
